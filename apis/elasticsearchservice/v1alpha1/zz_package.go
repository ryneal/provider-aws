/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// PackageParameters defines the desired state of Package
type PackageParameters struct {
	// Region is which region the Package will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// Description of the package.
	PackageDescription *string `json:"packageDescription,omitempty"`
	// Unique identifier for the package.
	// +kubebuilder:validation:Required
	PackageName *string `json:"packageName"`
	// The customer S3 location PackageSource for importing the package.
	// +kubebuilder:validation:Required
	PackageSource *PackageSource `json:"packageSource"`
	// Type of package. Currently supports only TXT-DICTIONARY.
	// +kubebuilder:validation:Required
	PackageType             *string `json:"packageType"`
	CustomPackageParameters `json:",inline"`
}

// PackageSpec defines the desired state of Package
type PackageSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       PackageParameters `json:"forProvider"`
}

// PackageObservation defines the observed state of Package
type PackageObservation struct {
	AvailablePackageVersion *string `json:"availablePackageVersion,omitempty"`
	// Timestamp which tells creation date of the package.
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`
	// Additional information if the package is in an error state. Null otherwise.
	ErrorDetails *ErrorDetails `json:"errorDetails,omitempty"`

	LastUpdatedAt *metav1.Time `json:"lastUpdatedAt,omitempty"`
	// Internal ID of the package.
	PackageID *string `json:"packageID,omitempty"`
	// Current state of the package. Values are COPYING/COPY_FAILED/AVAILABLE/DELETING/DELETE_FAILED
	PackageStatus *string `json:"packageStatus,omitempty"`
}

// PackageStatus defines the observed state of Package.
type PackageStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          PackageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Package is the Schema for the Packages API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Package struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PackageSpec   `json:"spec"`
	Status            PackageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PackageList contains a list of Packages
type PackageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Package `json:"items"`
}

// Repository type metadata.
var (
	PackageKind             = "Package"
	PackageGroupKind        = schema.GroupKind{Group: Group, Kind: PackageKind}.String()
	PackageKindAPIVersion   = PackageKind + "." + GroupVersion.String()
	PackageGroupVersionKind = GroupVersion.WithKind(PackageKind)
)

func init() {
	SchemeBuilder.Register(&Package{}, &PackageList{})
}
